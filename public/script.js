// public/script.js
const messagesDiv = document.getElementById('messages');
const inputField = document.getElementById('input');
const sendBtn = document.getElementById('sendBtn');
const recordBtn = document.getElementById('recordBtn');

// K·∫øt n·ªëi t·ªõi WebSocket server
const ws = new WebSocket('ws://localhost:8592/ws/22'); // Thay 'your_session_id' b·∫±ng ID phi√™n c·ªßa b·∫°n n·∫øu c·∫ßn

ws.binaryType = 'arraybuffer'; // ƒê·ªÉ nh·∫≠n d·ªØ li·ªáu nh·ªã ph√¢n t·ª´ server

ws.onopen = () => {
  console.log('ƒê√£ k·∫øt n·ªëi t·ªõi server');
};

// Khai b√°o bi·∫øn ƒë·ªÉ t√≠ch l≈©y ph·∫£n h·ªìi t·ª´ AI
let aiMessageBuffer = '';

ws.onmessage = (event) => {
    if (typeof event.data === 'string') {
      // X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n
      const message = event.data;
      if (message.startsWith('[start]')) {
        // L·ªùi ch√†o
        const greeting = message.substring(7);
        addMessageTypingEffect(`AI: ${greeting}`);
      } else if (message.startsWith('[end=')) {
        // K·∫øt th√∫c ph·∫£n h·ªìi
        // const content = message.substring(5, message.length - 1); // Lo·∫°i b·ªè '[end=' v√† ']'
        // aiMessageBuffer += content;
        // addMessageTypingEffect(`AI: ${aiMessageBuffer}`);
        aiMessageBuffer = ''; // X√≥a b·ªô ƒë·ªám sau khi hi·ªÉn th·ªã
      } else if (message.startsWith('[+]You said')) {
        // Ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng
        addMessageTypingEffect(`You: ${message.substring(12)}`);
        addMessageTypingEffect(`AI:`);
      } else if (message.startsWith('[end]')) {
        addMessageTypingEffect(`AI:`);
      } else if (message.startsWith('[end start]')) {
        addMessageTypingEffect(`AI:`);
      } else {
        // Tin nh·∫Øn ph·∫£n h·ªìi t·ª´ AI
        aiMessageBuffer += message;
        addMessageTypingEffect(`${message}`);
      }
    } else {
      // X·ª≠ l√Ω d·ªØ li·ªáu nh·ªã ph√¢n (√¢m thanh)
      const audioData = event.data;
      enqueueAudio(audioData); // Th√™m v√†o h√†ng ƒë·ª£i √¢m thanh
    }
  };
  
  // H√†m hi·ªÉn th·ªã tin nh·∫Øn v·ªõi hi·ªáu ·ª©ng g√µ
  function addMessageTypingEffect(message) {
    const messageElement = document.createElement('div');
    messagesDiv.appendChild(messageElement);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  
    let index = 0;
    function type() {
      if (index < message.length) {
        messageElement.textContent += message.charAt(index);
        index++;
        setTimeout(type, 30); // ƒêi·ªÅu ch·ªânh th·ªùi gian gi·ªØa c√°c k√Ω t·ª± (30ms)
      }
    }
    type();
  }
  
  // H√†m hi·ªÉn th·ªã tin nh·∫Øn th√¥ng th∆∞·ªùng (kh√¥ng hi·ªáu ·ª©ng g√µ)
  function addMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.textContent = message;
    messagesDiv.appendChild(messageElement);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

// G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
sendBtn.addEventListener('click', () => {
    const message = inputField.value.trim();
    if (message) {
      addMessage(`B·∫°n: ${message}`);
      clearAudioQueue(); // X√≥a h√†ng ƒë·ª£i √¢m thanh khi g·ª≠i tin nh·∫Øn m·ªõi
      ws.send(message);
      inputField.value = '';
    }
  });
// H√†ng ƒë·ª£i √¢m thanh v√† bi·∫øn ki·ªÉm so√°t
let audioQueue = [];
let isPlaying = false;
let currentAudio = null; // Bi·∫øn ƒë·ªÉ l∆∞u √¢m thanh ƒëang ph√°t

// Th√™m √¢m thanh v√†o h√†ng ƒë·ª£i
function enqueueAudio(audioData) {
  audioQueue.push(audioData);
  if (!isPlaying) {
    playNextAudio();
  }
}

// Ph√°t √¢m thanh ti·∫øp theo trong h√†ng ƒë·ª£i
function playNextAudio() {
  if (audioQueue.length > 0) {
    isPlaying = true;
    const audioData = audioQueue.shift();
    playAudio(audioData);
  } else {
    isPlaying = false;
  }
}

// Ph√°t √¢m thanh t·ª´ d·ªØ li·ªáu nh·ªã ph√¢n
function playAudio(audioData) {
  const blob = new Blob([audioData], { type: 'audio/wav' }); // Thay ƒë·ªïi type n·∫øu c·∫ßn
  const url = URL.createObjectURL(blob);
  const audio = new Audio(url);

  currentAudio = audio; // L∆∞u √¢m thanh ƒëang ph√°t

  audio.onended = () => {
    URL.revokeObjectURL(url); // Gi·∫£i ph√≥ng URL sau khi s·ª≠ d·ª•ng
    currentAudio = null; // X√≥a tham chi·∫øu √¢m thanh hi·ªán t·∫°i
    playNextAudio(); // Ph√°t √¢m thanh ti·∫øp theo
  };

  audio.play();
}

// X√≥a h√†ng ƒë·ª£i √¢m thanh v√† d·ª´ng √¢m thanh ƒëang ph√°t
function clearAudioQueue() {
  audioQueue = [];
  if (currentAudio) {
    currentAudio.pause();
    currentAudio.currentTime = 0;
    currentAudio = null;
  }
  isPlaying = false;
}

// X·ª≠ l√Ω ghi √¢m gi·ªçng n√≥i
let isRecording = false;
let mediaRecorder;
let audioChunks = [];

recordBtn.addEventListener('click', async () => {
  if (isRecording) {
    mediaRecorder.stop();
    recordBtn.textContent = 'üé§';
    isRecording = false;
  } else {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ghi √¢m.');
      return;
    }

    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);

    mediaRecorder.start();
    recordBtn.textContent = '‚èπÔ∏è';
    isRecording = true;

    mediaRecorder.ondataavailable = (event) => {
      audioChunks.push(event.data);
    };

    mediaRecorder.onstop = () => {
      const audioBlob = new Blob(audioChunks, { type: 'audio/webm; codecs=opus' });
      clearAudioQueue(); // X√≥a h√†ng ƒë·ª£i √¢m thanh khi g·ª≠i √¢m thanh m·ªõi
      sendAudio(audioBlob);
      audioChunks = [];
    };
  }
});

// G·ª≠i d·ªØ li·ªáu √¢m thanh t·ªõi server
function sendAudio(audioBlob) {
  // ƒê·ªçc d·ªØ li·ªáu t·ª´ Blob v√† g·ª≠i qua WebSocket
  audioBlob.arrayBuffer().then((arrayBuffer) => {
    ws.send(arrayBuffer);
  });
}
